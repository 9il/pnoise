Perlin noise benchmark.

Runs perlin noise 256x256 image generation 100 times.

Currently the frontend is just a bunch of shell scripts to compile/run compiled
versions of it. You'll have to run scripted versions manually with the
interpreter of your choice.

Example output of the run on my machine (intel i5-3470, 64 bit) and the versions I use:

clang version 3.4.2 (tags/RELEASE_34/dot2-final)
gcc (GCC) 4.9.1
Mono C# compiler version 3.4.0.0
Mono JIT compiler version 3.4.0 (tarball Wed Jun 25 20:39:03 UTC 2014)
DMD64 D Compiler v2.066
LDC - the LLVM D compiler (0.14.0):
  based on DMD v2.065 and LLVM 3.4.2
gdc (GCC) 4.9.1
go version go1.3 linux/amd64
gccgo (GCC) 4.9.1
rustc 0.11.0
Nimrod Compiler Version 0.9.3 (2014-02-13) [Linux: amd64]

=== clang -O3:
       0,148892439 seconds time elapsed

=== gcc -O3:
       0,080241344 seconds time elapsed

=== mono C#:
       1,450376452 seconds time elapsed

=== D (dmd):
       0,345792408 seconds time elapsed

=== D (ldc2):
       0,080969771 seconds time elapsed

=== D (gdc):
       0,069958640 seconds time elapsed

=== Go gc:
       0,379534953 seconds time elapsed

=== Go gccgo -O3:
       0,332014892 seconds time elapsed

=== Rust:
       0,079199179 seconds time elapsed

=== Nimrod:
       0,107013192 seconds time elapsed
