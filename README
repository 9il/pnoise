Perlin noise benchmark.

Runs perlin noise 256x256 image generation 100 times.

Currently the frontend is just a bunch of shell scripts to compile/run compiled
versions of it. You'll have to run scripted versions manually with the
interpreter of your choice.

Example output of the run on my machine (intel i5-3470, 64 bit) and the versions I use:

clang version 3.4.2 (tags/RELEASE_34/dot2-final)
gcc (GCC) 4.9.0 20140604 (prerelease)
Mono C# compiler version 3.4.0.0
Mono JIT compiler version 3.4.0 (tarball Wed Jun 25 20:39:03 UTC 2014)
DMD64 D Compiler v2.065
LDC - the LLVM D compiler (0.13.0):
  based on DMD v2.064 and LLVM 3.4.2
gdc (GCC) 4.9.0
go version go1.3 linux/amd64
gccgo (GCC) 4.9.0 20140604 (prerelease)
rustc 0.11.0
Nimrod Compiler Version 0.9.3 (2014-02-13) [Linux: amd64]

=== clang -O3:
       0,146721295 seconds time elapsed

=== gcc -O3:
       0,075836647 seconds time elapsed

=== mono C#:
       1,447746788 seconds time elapsed

=== D (dmd):
       0,674948999 seconds time elapsed

=== D (ldc2):
       0,336780366 seconds time elapsed

=== D (gdc):
       0,520143658 seconds time elapsed

=== Go gc:
       0,368691982 seconds time elapsed

=== Go gccgo -O3:
       0,333691880 seconds time elapsed

=== Rust:
       0,079532143 seconds time elapsed

=== Nimrod:
       0,107750953 seconds time elapsed
